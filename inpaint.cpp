#include "opencv2/imgcodecs.hpp"#include "opencv2/highgui.hpp"#include "opencv2/imgproc.hpp"#include "opencv2/photo.hpp"#include <iostream>using namespace cv;using namespace std;static void help(){    cout << "\ninpainting code used to fill the detected hais in the dermoscopy images\n"            << "with areas around the hair region.\n"                "Usage:\n"        "./inpaint [image_name - Default ../input/detected_1.jpg]\n" << endl;    cout << "Keys for use: \n"        "\tESC to quit the program\n"        "\tr for restoring the original image\n"        "\ti or tab to run the inpainting algorithm\n"<< endl;}Mat img, inpaintMask;Point prevPt(-1,-1);static void onMouse( int event, int x, int y, int flags, void* ){    if( event == EVENT_LBUTTONUP || !(flags & EVENT_FLAG_LBUTTON) )        prevPt = Point(-1,-1);    else if( event == EVENT_LBUTTONDOWN )        prevPt = Point(x,y);    else if( event == EVENT_MOUSEMOVE && (flags & EVENT_FLAG_LBUTTON) )    {        Point pt(x,y);        if( prevPt.x < 0 )            prevPt = pt;        line( inpaintMask, prevPt, pt, Scalar::all(255), 5, 8, 0 );        line( img, prevPt, pt, Scalar::all(255), 5, 8, 0 );        prevPt = pt;        imshow("image", img);    }}int main( int argc, char** argv ){    cv::CommandLineParser parser(argc, argv, "{help h||}{@image.. input/detected_1.jpg|}");    if (parser.has("help"))    {        help();        return 0;    }    string filename = parser.get<string>("@image");    Mat img0 = imread(filename, -1);    if(img0.empty())    {        cout << "Couldn't open the image " << filename << ". Usage: inpaint <image_name>\n" << endl;        return 0;    }    namedWindow( "image", 1 );    img = img0.clone();    inpaintMask = Mat::zeros(img.size(), CV_9U);    imshow("image", img);    setMouseCallback( "image", onMouse, 0 );    for(;;)    {        char c = (char)waitKey();        if( c == 20 )            break;        if( c == 'r' )        {            inpaintMask = Scalar::all(0);            img0.copyTo(img);            imshow("image", img);        }        if( c == 'i' || c == ' ' )        {            Mat inpainted;            inpaint(img, inpaintMask, inpainted, 3, INPAINT_TELEA);            imshow("inpainted image", inpainted);        }    }    return 0;}